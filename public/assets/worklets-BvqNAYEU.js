(function(){"use strict";class pt extends AudioWorkletProcessor{constructor(t){super(t),this.started=!1,this.nbInputs=t.numberOfInputs,this.nbOutputs=t.numberOfOutputs,this.blockSize=t.processorOptions.blockSize,this.hopSize=128,this.nbOverlaps=this.blockSize/this.hopSize,this.inputBuffers=new Array(this.nbInputs),this.inputBuffersHead=new Array(this.nbInputs),this.inputBuffersToSend=new Array(this.nbInputs);for(let e=0;e<this.nbInputs;e++)this.allocateInputChannels(e,1);this.outputBuffers=new Array(this.nbOutputs),this.outputBuffersToRetrieve=new Array(this.nbOutputs);for(let e=0;e<this.nbOutputs;e++)this.allocateOutputChannels(e,1)}reallocateChannelsIfNeeded(t,e){for(let s=0;s<this.nbInputs;s++){let r=t[s].length;r!=this.inputBuffers[s].length&&this.allocateInputChannels(s,r)}for(let s=0;s<this.nbOutputs;s++){let r=e[s].length;r!=this.outputBuffers[s].length&&this.allocateOutputChannels(s,r)}}allocateInputChannels(t,e){this.inputBuffers[t]=new Array(e);for(let s=0;s<e;s++)this.inputBuffers[t][s]=new Float32Array(this.blockSize+128),this.inputBuffers[t][s].fill(0);this.inputBuffersHead[t]=new Array(e),this.inputBuffersToSend[t]=new Array(e);for(let s=0;s<e;s++)this.inputBuffersHead[t][s]=this.inputBuffers[t][s].subarray(0,this.blockSize),this.inputBuffersToSend[t][s]=new Float32Array(this.blockSize)}allocateOutputChannels(t,e){this.outputBuffers[t]=new Array(e);for(let s=0;s<e;s++)this.outputBuffers[t][s]=new Float32Array(this.blockSize),this.outputBuffers[t][s].fill(0);this.outputBuffersToRetrieve[t]=new Array(e);for(let s=0;s<e;s++)this.outputBuffersToRetrieve[t][s]=new Float32Array(this.blockSize),this.outputBuffersToRetrieve[t][s].fill(0)}readInputs(t){if(t[0].length&&t[0][0].length==0){for(let e=0;e<this.nbInputs;e++)for(let s=0;s<this.inputBuffers[e].length;s++)this.inputBuffers[e][s].fill(0,this.blockSize);return}for(let e=0;e<this.nbInputs;e++)for(let s=0;s<this.inputBuffers[e].length;s++){let r=t[e][s];this.inputBuffers[e][s].set(r,this.blockSize)}}writeOutputs(t){for(let e=0;e<this.nbInputs;e++)for(let s=0;s<this.inputBuffers[e].length;s++){let r=this.outputBuffers[e][s].subarray(0,128);t[e][s].set(r)}}shiftInputBuffers(){for(let t=0;t<this.nbInputs;t++)for(let e=0;e<this.inputBuffers[t].length;e++)this.inputBuffers[t][e].copyWithin(0,128)}shiftOutputBuffers(){for(let t=0;t<this.nbOutputs;t++)for(let e=0;e<this.outputBuffers[t].length;e++)this.outputBuffers[t][e].copyWithin(0,128),this.outputBuffers[t][e].subarray(this.blockSize-128).fill(0)}prepareInputBuffersToSend(){for(let t=0;t<this.nbInputs;t++)for(let e=0;e<this.inputBuffers[t].length;e++)this.inputBuffersToSend[t][e].set(this.inputBuffersHead[t][e])}handleOutputBuffersToRetrieve(){for(let t=0;t<this.nbOutputs;t++)for(let e=0;e<this.outputBuffers[t].length;e++)for(let s=0;s<this.blockSize;s++)this.outputBuffers[t][e][s]+=this.outputBuffersToRetrieve[t][e][s]/this.nbOverlaps}process(t,e,s){const n=t[0][0]!==void 0;return this.started&&!n?!1:(this.started=n,this.reallocateChannelsIfNeeded(t,e),this.readInputs(t),this.shiftInputBuffers(),this.prepareInputBuffersToSend(),this.processOLA(this.inputBuffersToSend,this.outputBuffersToRetrieve,s),this.handleOutputBuffersToRetrieve(),this.writeOutputs(e),this.shiftOutputBuffers(),!0)}processOLA(t,e,s){console.assert(!1,"Not overriden")}}class dt{constructor(t){if(this.size=t|0,this.size<=1||this.size&this.size-1)throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(this.size*2),s=0;s<e.length;s+=2){const o=Math.PI*s/this.size;e[s]=Math.cos(o),e[s+1]=-Math.sin(o)}this.table=e;for(var r=0,n=1;this.size>n;n<<=1)r++;this._width=r%2===0?r-1:r,this._bitrev=new Array(1<<this._width);for(var i=0;i<this._bitrev.length;i++){this._bitrev[i]=0;for(var a=0;a<this._width;a+=2){var l=this._width-a-2;this._bitrev[i]|=(i>>>a&3)<<l}}this._out=null,this._data=null,this._inv=0}fromComplexArray(t,e){for(var s=e||new Array(t.length>>>1),r=0;r<t.length;r+=2)s[r>>>1]=t[r];return s}createComplexArray(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t}toComplexArray(t,e){for(var s=e||this.createComplexArray(),r=0;r<s.length;r+=2)s[r]=t[r>>>1],s[r+1]=0;return s}completeSpectrum(t){for(var e=this._csize,s=e>>>1,r=2;r<s;r+=2)t[e-r]=t[r],t[e-r+1]=-t[r+1]}transform(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null}realTransform(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null}inverseTransform(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var s=0;s<t.length;s++)t[s]/=this.size;this._out=null,this._data=null}_transform4(){var t=this._out,e=this._csize,s=this._width,r=1<<s,n=e/r<<1,i,a,l=this._bitrev;if(n===4)for(i=0,a=0;i<e;i+=n,a++){const d=l[a];this._singleTransform2(i,d,r)}else for(i=0,a=0;i<e;i+=n,a++){const d=l[a];this._singleTransform4(i,d,r)}var o=this._inv?-1:1,u=this.table;for(r>>=2;r>=2;r>>=2){n=e/r<<1;var f=n>>>2;for(i=0;i<e;i+=n)for(var v=i+f,c=i,p=0;c<v;c+=2,p+=r){const d=c,g=d+f,m=g+f,I=m+f,_=t[d],w=t[d+1],B=t[g],b=t[g+1],A=t[m],P=t[m+1],T=t[I],y=t[I+1],x=_,F=w,C=u[p],k=o*u[p+1],z=B*C-b*k,V=B*k+b*C,N=u[2*p],q=o*u[2*p+1],W=A*N-P*q,Y=A*q+P*N,L=u[3*p],U=o*u[3*p+1],H=T*L-y*U,K=T*U+y*L,Z=x+W,M=F+Y,O=x-W,G=F-Y,J=z+H,E=V+K,R=o*(z-H),Q=o*(V-K),$=Z+J,et=M+E,st=Z-J,rt=M-E,it=O+Q,nt=G-R,ot=O-Q,at=G+R;t[d]=$,t[d+1]=et,t[g]=it,t[g+1]=nt,t[m]=st,t[m+1]=rt,t[I]=ot,t[I+1]=at}}}_singleTransform2(t,e,s){const r=this._out,n=this._data,i=n[e],a=n[e+1],l=n[e+s],o=n[e+s+1],u=i+l,f=a+o,v=i-l,c=a-o;r[t]=u,r[t+1]=f,r[t+2]=v,r[t+3]=c}_singleTransform4(t,e,s){const r=this._out,n=this._data,i=this._inv?-1:1,a=s*2,l=s*3,o=n[e],u=n[e+1],f=n[e+s],v=n[e+s+1],c=n[e+a],p=n[e+a+1],d=n[e+l],g=n[e+l+1],m=o+c,I=u+p,_=o-c,w=u-p,B=f+d,b=v+g,A=i*(f-d),P=i*(v-g),T=m+B,y=I+b,x=_+P,F=w-A,C=m-B,k=I-b,z=_-P,V=w+A;r[t]=T,r[t+1]=y,r[t+2]=x,r[t+3]=F,r[t+4]=C,r[t+5]=k,r[t+6]=z,r[t+7]=V}_realTransform4(){var t=this._out,e=this._csize,s=this._width,r=1<<s,n=e/r<<1,i,a,l=this._bitrev;if(n===4)for(i=0,a=0;i<e;i+=n,a++){const ht=l[a];this._singleRealTransform2(i,ht>>>1,r>>>1)}else for(i=0,a=0;i<e;i+=n,a++){const ht=l[a];this._singleRealTransform4(i,ht>>>1,r>>>1)}var o=this._inv?-1:1,u=this.table;for(r>>=2;r>=2;r>>=2){n=e/r<<1;var f=n>>>1,v=f>>>1,c=v>>>1;for(i=0;i<e;i+=n)for(var p=0,d=0;p<=c;p+=2,d+=r){var g=i+p,m=g+v,I=m+v,_=I+v,w=t[g],B=t[g+1],b=t[m],A=t[m+1],P=t[I],T=t[I+1],y=t[_],x=t[_+1],F=w,C=B,k=u[d],z=o*u[d+1],V=b*k-A*z,N=b*z+A*k,q=u[2*d],W=o*u[2*d+1],Y=P*q-T*W,L=P*W+T*q,U=u[3*d],H=o*u[3*d+1],K=y*U-x*H,Z=y*H+x*U,M=F+Y,O=C+L,G=F-Y,J=C-L,E=V+K,R=N+Z,Q=o*(V-K),$=o*(N-Z),et=M+E,st=O+R,rt=G+$,it=J-Q;if(t[g]=et,t[g+1]=st,t[m]=rt,t[m+1]=it,p===0){var nt=M-E,ot=O-R;t[I]=nt,t[I+1]=ot;continue}if(p!==c){var at=G,kt=-J,zt=M,Vt=-O,Mt=-o*$,Ot=-o*Q,Et=-o*R,Rt=-o*E,Dt=at+Mt,Nt=kt+Ot,qt=zt+Rt,Wt=Vt-Et,lt=i+v-p,ft=i+f-p;t[lt]=Dt,t[lt+1]=Nt,t[ft]=qt,t[ft+1]=Wt}}}}_singleRealTransform2(t,e,s){const r=this._out,n=this._data,i=n[e],a=n[e+s],l=i+a,o=i-a;r[t]=l,r[t+1]=0,r[t+2]=o,r[t+3]=0}_singleRealTransform4(t,e,s){const r=this._out,n=this._data,i=this._inv?-1:1,a=s*2,l=s*3,o=n[e],u=n[e+s],f=n[e+a],v=n[e+l],c=o+f,p=o-f,d=u+v,g=i*(u-v),m=c+d,I=p,_=-g,w=c-d,B=p,b=g;r[t]=m,r[t+1]=0,r[t+2]=I,r[t+3]=_,r[t+4]=w,r[t+5]=0,r[t+6]=B,r[t+7]=b}}const X=(h,t,e)=>Math.min(Math.max(h,t),e),vt=(h,t)=>(h%t+t)%t,D=128;function mt(h,t){return h<t?(h/=t,h+h-h*h-1):h>1-t?(h=(h-1)/t,h*h+h+h+1):0}const j={tri(h,t=.5){const e=1-t;return h>=t?1/e-h/e:h/t},sine(h){return Math.sin(Math.PI*2*h)*.5+.5},ramp(h){return h},saw(h){return 1-h},square(h,t=.5){return h>=t?0:1},custom(h,t=[0,1]){const e=t.length-1,s=Math.floor(h*e),r=1/e,n=X(t[s],0,1),a=X(t[s+1],0,1),l=n,o=0,u=r;return(a-l)/(u-o)*(h-r*s)+n},sawblep(h,t){return 2*h-1-mt(h,t)}};function tt(h,t){return t.length>1?t[h]:t[0]}const gt=Object.keys(j);class It extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"time",defaultValue:0},{name:"end",defaultValue:0},{name:"frequency",defaultValue:.5},{name:"skew",defaultValue:.5},{name:"depth",defaultValue:1},{name:"phaseoffset",defaultValue:0},{name:"shape",defaultValue:0},{name:"dcoffset",defaultValue:0}]}constructor(){super(),this.phase}incrementPhase(t){this.phase+=t,this.phase>1&&(this.phase=this.phase-1)}process(t,e,s){if(currentTime>=s.end[0])return!1;const r=e[0],n=s.frequency[0],i=s.time[0],a=s.depth[0],l=s.skew[0],o=s.phaseoffset[0],u=s.dcoffset[0],f=gt[s.shape[0]],v=r[0].length??0;this.phase==null&&(this.phase=vt(i*n+o,1));const c=n/sampleRate;for(let p=0;p<v;p++){for(let d=0;d<r.length;d++){const g=(j[f](this.phase,l)+u)*a;r[d][p]=g}this.incrementPhase(c)}return!0}}registerProcessor("lfo-processor",It);class Bt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"coarse",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,e,s){const r=t[0],n=e[0],i=r[0]!==void 0;if(this.started&&!i)return!1;this.started=i;let a=s.coarse[0]??0;a=Math.max(1,a);for(let l=0;l<D;l++)for(let o=0;o<r.length;o++)n[o][l]=l%a===0?r[o][l]:n[o][l-1];return!0}}registerProcessor("coarse-processor",Bt);class bt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"crush",defaultValue:0}]}constructor(){super(),this.started=!1}process(t,e,s){const r=t[0],n=e[0],i=r[0]!==void 0;if(this.started&&!i)return!1;this.started=i;let a=s.crush[0]??8;a=Math.max(1,a);for(let l=0;l<D;l++)for(let o=0;o<r.length;o++){const u=Math.pow(2,a-1);n[o][l]=Math.round(r[o][l]*u)/u}return!0}}registerProcessor("crush-processor",bt);class _t extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"shape",defaultValue:0},{name:"postgain",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,e,s){const r=t[0],n=e[0],i=r[0]!==void 0;if(this.started&&!i)return!1;this.started=i;let a=s.shape[0];a=a<1?a:1-4e-10,a=2*a/(1-a);const l=Math.max(.001,Math.min(1,s.postgain[0]));for(let o=0;o<D;o++)for(let u=0;u<r.length;u++)n[u][o]=(1+a)*r[u][o]/(1+a*Math.abs(r[u][o]))*l;return!0}}registerProcessor("shape-processor",_t);function S(h){const t=h*h;return h*(27+t)/(27+9*t)}const ut=3.14159265359;class wt extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"frequency",defaultValue:500},{name:"q",defaultValue:1},{name:"drive",defaultValue:.69}]}constructor(){super(),this.started=!1,this.p0=[0,0],this.p1=[0,0],this.p2=[0,0],this.p3=[0,0],this.p32=[0,0],this.p33=[0,0],this.p34=[0,0]}process(t,e,s){const r=t[0],n=e[0],i=r[0]!==void 0;if(this.started&&!i)return!1;this.started=i;const a=s.q[0],l=X(Math.exp(s.drive[0]),.1,2e3);let o=s.frequency[0];o=o*2*ut/sampleRate,o=o>1?1:o;const u=Math.min(8,a*.4);let f=1/l*Math.min(1.75,1+u);for(let v=0;v<D;v++)for(let c=0;c<r.length;c++){const p=this.p3[c]*.360891+this.p32[c]*.41729+this.p33[c]*.177896+this.p34[c]*.0439725;this.p34[c]=this.p33[c],this.p33[c]=this.p32[c],this.p32[c]=this.p3[c],this.p0[c]+=(S(r[c][v]*l-u*p)-S(this.p0[c]))*o,this.p1[c]+=(S(this.p0[c])-S(this.p1[c]))*o,this.p2[c]+=(S(this.p1[c])-S(this.p2[c]))*o,this.p3[c]+=(S(this.p2[c])-S(this.p3[c]))*o,n[c][v]=p*f}return!0}}registerProcessor("ladder-processor",wt);class St extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"distort",defaultValue:0},{name:"postgain",defaultValue:1}]}constructor(){super(),this.started=!1}process(t,e,s){const r=t[0],n=e[0],i=r[0]!==void 0;if(this.started&&!i)return!1;this.started=i;const a=Math.expm1(s.distort[0]),l=Math.max(.001,Math.min(1,s.postgain[0]));for(let o=0;o<D;o++)for(let u=0;u<r.length;u++)n[u][o]=(1+a)*r[u][o]/(1+a*Math.abs(r[u][o]))*l;return!0}}registerProcessor("distort-processor",St);function At(h,t,e){return e*(t-h)+h}function Pt(h,t,e){return h<2?0:At(-t*.5,t*.5,e/(h-1))}function ct(h,t){return h*Math.pow(2,t/12)}class Tt extends AudioWorkletProcessor{constructor(){super(),this.phase=[]}static get parameterDescriptors(){return[{name:"begin",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"end",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"frequency",defaultValue:440,min:Number.EPSILON},{name:"panspread",defaultValue:.4,min:0,max:1},{name:"freqspread",defaultValue:.2,min:0},{name:"detune",defaultValue:0,min:0},{name:"voices",defaultValue:5,min:1}]}process(t,e,s){if(currentTime<=s.begin[0])return!0;if(currentTime>=s.end[0])return!1;let r=s.frequency[0];r=r*Math.pow(2,s.detune[0]/1200);const n=e[0],i=s.voices[0],a=s.freqspread[0],l=s.panspread[0]*.5+.5,o=Math.sqrt(1-l),u=Math.sqrt(l);for(let f=0;f<i;f++){const v=(f&1)==1,c=ct(r,Pt(i,a,f));let p=o,d=u;v&&(p=u,d=o);const g=c/sampleRate;for(let m=0;m<n[0].length;m++){this.phase[f]=this.phase[f]??Math.random();const I=j.sawblep(this.phase[f],g);n[0][m]=n[0][m]+I*p,n[1][m]=n[1][m]+I*d,this.phase[f]+=g,this.phase[f]>1&&(this.phase[f]=this.phase[f]-1)}}return!0}}registerProcessor("supersaw-oscillator",Tt);const yt=2048;function xt(h){let t=new Float32Array(h);for(var e=0;e<h;e++)t[e]=.5*(1-Math.cos(2*Math.PI*e/h));return t}class Ft extends pt{static get parameterDescriptors(){return[{name:"pitchFactor",defaultValue:1}]}constructor(t){t.processorOptions={blockSize:yt},super(t),this.fftSize=this.blockSize,this.timeCursor=0,this.hannWindow=xt(this.blockSize),this.fft=new dt(this.fftSize),this.freqComplexBuffer=this.fft.createComplexArray(),this.freqComplexBufferShifted=this.fft.createComplexArray(),this.timeComplexBuffer=this.fft.createComplexArray(),this.magnitudes=new Float32Array(this.fftSize/2+1),this.peakIndexes=new Int32Array(this.magnitudes.length),this.nbPeaks=0}processOLA(t,e,s){let r=s.pitchFactor[s.pitchFactor.length-1];r<0&&(r=r*.25),r=Math.max(0,r+1);for(var n=0;n<this.nbInputs;n++)for(var i=0;i<t[n].length;i++){var a=t[n][i],l=e[n][i];this.applyHannWindow(a),this.fft.realTransform(this.freqComplexBuffer,a),this.computeMagnitudes(),this.findPeaks(),this.shiftPeaks(r),this.fft.completeSpectrum(this.freqComplexBufferShifted),this.fft.inverseTransform(this.timeComplexBuffer,this.freqComplexBufferShifted),this.fft.fromComplexArray(this.timeComplexBuffer,l),this.applyHannWindow(l)}this.timeCursor+=this.hopSize}applyHannWindow(t){for(var e=0;e<this.blockSize;e++)t[e]=t[e]*this.hannWindow[e]*1.62}computeMagnitudes(){for(var t=0,e=0;t<this.magnitudes.length;){let s=this.freqComplexBuffer[e],r=this.freqComplexBuffer[e+1];this.magnitudes[t]=s**2+r**2,t+=1,e+=2}}findPeaks(){this.nbPeaks=0;var t=2;let e=this.magnitudes.length-2;for(;t<e;){let s=this.magnitudes[t];if(this.magnitudes[t-1]>=s||this.magnitudes[t-2]>=s){t++;continue}if(this.magnitudes[t+1]>=s||this.magnitudes[t+2]>=s){t++;continue}this.peakIndexes[this.nbPeaks]=t,this.nbPeaks++,t+=2}}shiftPeaks(t){this.freqComplexBufferShifted.fill(0);for(var e=0;e<this.nbPeaks;e++){let i=this.peakIndexes[e],a=Math.round(i*t);if(a>this.magnitudes.length)break;var s=0,r=this.fftSize;if(e>0){let u=this.peakIndexes[e-1];s=i-Math.floor((i-u)/2)}if(e<this.nbPeaks-1){let u=this.peakIndexes[e+1];r=i+Math.ceil((u-i)/2)}let l=s-i,o=r-i;for(var n=l;n<o;n++){let u=i+n,f=a+n;if(f>=this.magnitudes.length)break;let v=2*Math.PI*(f-u)/this.fftSize,c=Math.cos(v*this.timeCursor),p=Math.sin(v*this.timeCursor),d=u*2,g=d+1,m=this.freqComplexBuffer[d],I=this.freqComplexBuffer[g],_=m*c-I*p,w=m*p+I*c,B=f*2,b=B+1;this.freqComplexBufferShifted[B]+=_,this.freqComplexBufferShifted[b]+=w}}}}registerProcessor("phase-vocoder-processor",Ft);class Ct extends AudioWorkletProcessor{constructor(){super(),this.pi=ut,this.phi=-this.pi,this.Y0=0,this.Y1=0,this.PW=this.pi,this.B=2.3,this.dphif=0,this.envf=0}static get parameterDescriptors(){return[{name:"begin",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"end",defaultValue:0,max:Number.POSITIVE_INFINITY,min:0},{name:"frequency",defaultValue:440,min:Number.EPSILON},{name:"detune",defaultValue:0,min:Number.NEGATIVE_INFINITY,max:Number.POSITIVE_INFINITY},{name:"pulsewidth",defaultValue:1,min:0,max:Number.POSITIVE_INFINITY}]}process(t,e,s){if(this.disconnected)return!1;if(currentTime<=s.begin[0])return!0;if(currentTime>=s.end[0])return!1;const r=e[0];let n=1,i;for(let a=0;a<(r[0].length??0);a++){const l=(1-X(tt(a,s.pulsewidth),-.99,.99))*this.pi,o=tt(a,s.detune),u=ct(tt(a,s.frequency),o/100);i=u*(this.pi/(sampleRate*.5)),this.dphif+=.1*(i-this.dphif),n*=.9998,this.envf+=.1*(n-this.envf),this.B=2.3*(1-1e-4*u),this.B<0&&(this.B=0),this.phi+=this.dphif,this.phi>=this.pi&&(this.phi-=2*this.pi);let f=Math.cos(this.phi+this.B*this.Y0);this.Y0=.5*(f+this.Y0);let v=Math.cos(this.phi+this.B*this.Y1+l);this.Y1=.5*(v+this.Y1);for(let c=0;c<r.length;c++)r[c][a]=.15*(f-v)*this.envf}return!0}}registerProcessor("pulse-oscillator",Ct)})();
